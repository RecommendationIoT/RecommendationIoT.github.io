//Create Time Tree Indexes
CREATE INDEX ON :Year(value);
CREATE INDEX ON :Month(value);
CREATE INDEX ON :Day(value);
CREATE INDEX ON :Hour(value);


//Create Constraints
CREATE CONSTRAINT ON (u:User) ASSERT u.hid IS UNIQUE;



//***************************** Create Time Tree ********************************
//Query 1
//Create Time Tree with Quarter-Hour Depth
WITH [2017] AS years, range(1,12) AS months
FOREACH (year IN years |
    CREATE (y:Year {value: year})
    FOREACH (month IN months |
        CREATE (m:Month {value: month})
        MERGE (y)-[:CONTAINS]->(m)
        FOREACH (day IN (
            CASE
                WHEN month IN [1,3,5,7,8,10,12] THEN range(1,31)
                WHEN month = 2 THEN
                    CASE
                        WHEN year % 4 <> 0 THEN range(1,28)
                        WHEN year % 100 <> 0 THEN range(1,29)
                        WHEN year % 400 <> 0 THEN range(1,28)
                        ELSE range(1,29)
                    END
                ELSE range(1,30)
            END) |
            CREATE (d:Day {value: day})
            MERGE (m)-[:CONTAINS]->(d)
            FOREACH (hour IN range(0,23) |
                CREATE (h:Hour {value: hour})
                MERGE (d)-[:CONTAINS]->(h)
                )
            )
        )
    )
;

//Query 2
//Connect Years Sequentially
//not needed for just one year

//Query 3
//Connect Months Sequentially
MATCH (year:Year)-[:CONTAINS]->(month)
WITH year, month
ORDER BY year.value, month.value
WITH collect(month) AS months
FOREACH (i IN range(0, size(months)-2) |
    FOREACH (month1 IN [months[i]] |
        FOREACH (month2 IN [months[i+1]] |
            CREATE UNIQUE (month1)-[:NEXT]->(month2)
            )
        )
    )
;

//Query 4
//Connect Days Sequentially
MATCH (year:Year)-[:CONTAINS]->(month)-[:CONTAINS]->(day)
WITH year, month, day
ORDER BY year.value, month.value, day.value
WITH collect(day) AS days
FOREACH (i IN range(0, size(days)-2) |
    FOREACH (day1 IN [days[i]] |
        FOREACH (day2 IN [days[i+1]] |
            CREATE UNIQUE (day1)-[:NEXT]->(day2)
            )
        )
    )
;

//Query 5
//Connect Hours Sequentially
MATCH (year:Year)-[:CONTAINS]->(month)-[:CONTAINS]->(day)-[:CONTAINS]->(hour)
WITH year, month, day, hour
ORDER BY year.value, month.value, day.value, hour.value
WITH collect(hour) AS hours
FOREACH (i IN range(0, size(hours)-2) |
    FOREACH (hour1 IN [hours[i]] |
        FOREACH (hour2 IN [hours[i+1]] |
            CREATE UNIQUE (hour1)-[:NEXT]->(hour2)
            )
        )
    )
;

//Query 6
//Connect Quarter Hours Sequentially
//Not needed since we do not user quarter hours


//********************************** Weather ********************************
//Query 7
//Import temperature data
USING PERIODIC COMMIT 500
LOAD CSV WITH HEADERS FROM 
'file:///C:/weather/temperature.csv' AS line
WITH line, line.Site AS borough,
    split(line.ReadingDateTime, ' ') AS dateTime
WITH line,borough, split(dateTime[0], '/') AS date, split(dateTime[1], ':') AS time
WITH line, borough, toInteger(date[0]) AS day, toInteger(date[1]) AS month, 
    toInteger(date[2]) AS year, toInteger(time[0]) AS hour
MATCH (y:Year {value: year})-[:CONTAINS]->(m:Month {value: month})-[:CONTAINS]->(d:Day {value: day})
//Hours are handled as 24-Hour time from 0 to 23
//Connect Hour to Already Existing Day
MERGE (d)-[:CONTAINS]->(h:Hour {value: hour})
//Minutes are Zero Based with a Range from 0 to 59
//Connect Minute to Already Existing Hour
//MERGE (h)-[:CONTAINS]->(min:Minute {value: minute})
//Connect temperature reading to Already Existing Minute 
CREATE (h)-[:TMP_READING]->(tmp:Temperature)
SET tmp.value = toInteger(line.Value),
    tmp.unit = line.Units
//Create other temperatue relationships
MERGE (b:Borough {name: borough})
CREATE (tmp)-[:IN_BOROUGH]->(b)
;

//Query 8
//Import humidity data
USING PERIODIC COMMIT 500
LOAD CSV WITH HEADERS FROM 
'file:///C:/weather/humidity.csv' AS line
WITH line, line.Site AS borough,
    split(line.ReadingDateTime, ' ') AS dateTime
WITH line, borough,  split(dateTime[0], '/') AS date, split(dateTime[1], ':') AS time
WITH line, borough, toInteger(date[0]) AS day, toInteger(date[1]) AS month, 
    toInteger(date[2]) AS year, toInteger(time[0]) AS hour, toInteger(time[1]) AS minute
MATCH (y:Year {value: year})-[:CONTAINS]->(m:Month {value: month})-[:CONTAINS]->(d:Day {value: day})
//Hours are handled as 24-Hour time from 0 to 23
//Connect Hour to Already Existing Day
MERGE (d)-[:CONTAINS]->(h:Hour {value: hour})
//Minutes are Zero Based with a Range from 0 to 59
//Connect Minute to Already Existing Hour
//MERGE (h)-[:CONTAINS]->(min:Minute {value: minute})
//Connect relative humidity reading to Already Existing Minute 
CREATE (h)-[:HUM_READING]->(hum:Humidity)
SET hum.value = toInteger(line.Value),
    hum.unit = line.Units
//Create other relative humidity relationships
MERGE (b:Borough {name: borough})
CREATE (hum)-[:IN_BOROUGH]->(b)
;


//Query 9

//Import users data
USING PERIODIC COMMIT 500
LOAD CSV WITH HEADERS FROM 
'file:///C:/users/users.csv' AS line
MERGE (u:User {hid: line.Hid})
ON CREATE SET 
	u.hid = line.Hid,
    u.name = line.Owner_Name,
    u.email = line.Owner_Email,
    u.surface = line.Surface_Area,
    u.borough=line.Borough,
	u.orientation=line.Orientation;

	
//Query 10
//Import user Preferences
USING PERIODIC COMMIT 500
LOAD CSV WITH HEADERS FROM 
'file:///C:/users/userpreferences.csv' AS line
MATCH (u:User {hid: line.Hid})
CREATE (u)-[:PREFER]->(c:Conditions)
SET c.desiredtemp = toInteger(line.Desired_Temp),
    c.desiredhumidity = toInteger(line.Desired_Humidity),
    c.consumerprofile = toInteger(line.Consumer_Profile),
    c.illness= line.Illness;

	
//Query 11
//Import house conditions

USING PERIODIC COMMIT 500
LOAD CSV WITH HEADERS FROM 
'file:///C:/users/houseconditions.csv' AS line
WITH line, split(line.dateTime, ' ') AS dateTime
WITH line, split(dateTime[0], '/') AS date, split(dateTime[1], ':') AS time
WITH line, toInteger(date[0]) AS day, toInteger(date[1]) AS month, 
    toInteger(date[2]) AS year, toInteger(time[0]) AS hour
MATCH (:Year {value: year})-[:CONTAINS]->(:Month {value: month})-[:CONTAINS]->
    (:Day {value: day})-[:CONTAINS]->(h:Hour {value: hour})
MATCH (u:User {hid: line.Hid})
CREATE (u)-[:HAS_CONDITIONS]->(hc: HouseConditions )-[:CONDITIONS_INSTANT]->(h)
SET hc.temperature = toInteger(line.Temperature),
    hc.humidity = toInteger(line.Humidity);
	
//Query 12
//Import rating and schedules
USING PERIODIC COMMIT 500
LOAD CSV WITH HEADERS FROM 
'file:///C:/users/userRatingSchedules.csv' AS line
WITH line, split(line.DateTime, ' ') AS dateTime
WITH line, split(dateTime[0], '/') AS date, split(dateTime[1], ':') AS time
WITH line, toInteger(date[0]) AS day, toInteger(date[1]) AS month, 
    toInteger(date[2]) AS year, toInteger(time[0]) AS hour, toInteger(time[1]) AS minute
MATCH (:Year {value: year})-[:CONTAINS]->(:Month {value: month})-[:CONTAINS]->
    (:Day {value: day})-[:CONTAINS]->(hourNode:Hour {value: hour})
MATCH (u:User {hid: line.Hid})
MERGE (s:Schedule {value: line.Schedule_Temp})
CREATE (u)-[:GAVE]->(r:Rating {value: toInteger(line.Rating)})-[:RATING_INSTANT]->(hourNode),
    (r)-[:FOR_SCHEDULE]->(s)
;

