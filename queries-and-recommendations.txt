//----- Create Queries and Recommendations--------\\

//Query 1
//get ratings and schedule for a certain moment for a certain user
MATCH (y:Year)-[:CONTAINS]->(m:Month)-[:CONTAINS]->(d:Day)-[:CONTAINS]->(h:Hour),
	  (u:User)
WHERE y.value = 2017 AND m.value = 3 AND d.value = 1 AND
      h.value = 12 AND u.name = "user_name_1"
MATCH (h)<-[:RATING_INSTANT]-(r:Rating)-[:FOR_SCHEDULE]->(s:Schedule),
      (u)-[:GAVE]->(r)
RETURN u.name AS User, u.borough as Borough, r.value AS Rating, s.value AS Schedule_Temp
ORDER BY Rating DESC
;


//Query 2
//get user preferences for a certain user
MATCH (u:User {name: "user_name_2"}) - [r:PREFER] -> (c:Conditions)
RETURN u.name AS Name, c.desiredtemp AS desiredtemp, 
       c.desiredhumidity AS Humidity, c.illness AS Illness
;

//get user preferences for all users
MATCH (u:User) - [r:PREFER] -> (c:Conditions)
RETURN u.name AS Name,u.surface AS Surface, c.desiredtemp AS desiredtemp, 
       c.desiredhumidity AS Humidity, c.illness AS Illness
;


//Query 3
//Qyery to retrieve ratings and schedules, popoular at a certain moment for all users
MATCH (y:Year)-[:CONTAINS]->(m:Month)-[:CONTAINS]->(d:Day)-[:CONTAINS]->
      (h:Hour)
WHERE y.value = 2017 AND m.value = 3 AND d.value = 1 AND
      h.value = 12
WITH  h
MATCH (h)<-[:RATING_INSTANT]-(r:Rating)-[:FOR_SCHEDULE]->(s:Schedule),
      (u:User)-[:GAVE]->(r)
RETURN u.name AS User, u.borough as Borough, r.value AS Rating, s.value AS Schedule_Temp
ORDER BY Rating DESC
;

//Query 4
//recommendations based on user preferences
MATCH (y:Year)-[:CONTAINS]->(m:Month)-[:CONTAINS]->(d:Day)-[:CONTAINS]->
      (h:Hour)
WHERE y.value = 2017 AND m.value = 3 AND d.value = 1 AND
      h.value = 12
MATCH (user_name_111:User {name: "user_name_1"}) - [pr:PREFER] -> (con:Conditions),
	  (h)<-[:RATING_INSTANT]-(r:Rating)-[:FOR_SCHEDULE]->(s:Schedule),
      (u:User)-[:GAVE]->(r)	  
WHERE (toInteger(s.value)-5) <= con.desiredtemp <= (toInteger(s.value)+5)
RETURN u.name AS User, u.borough as Borough, r.value AS Rating, s.value AS ScheduleTemp, 
       user_name_111.name AS user_name_111, con.desiredtemp AS desiredtemp
ORDER BY Rating DESC
;

//Query 5
//recommendations based on user characteristics
MATCH (y:Year)-[:CONTAINS]->(m:Month)-[:CONTAINS]->(d:Day)-[:CONTAINS]->
      (h:Hour)
WHERE y.value = 2017 AND m.value = 3 AND d.value = 1 AND
      h.value = 12
MATCH (user_name_111:User {name: "user_name_1"}),
	  (h)<-[:RATING_INSTANT]-(r:Rating)-[:FOR_SCHEDULE]->(s:Schedule),
      (u:User)-[:GAVE]->(r)	  
WHERE (toInteger(u.surface)-110) <= (toInteger(user_name_111.surface)) <= (toInteger(u.surface)+110)
RETURN u.name AS User, u.surface AS surface, user_name_111.surface AS user_name_111Surface, 
       r.value AS Rating, s.value AS ScheduleTemp
ORDER BY Rating DESC
;


//------ Euclidean Distance ------\\

//Query 6
//distance of two user based on their preference on desired_temperature
MATCH (u1:User)- [pr1:PREFER] -> (con1:Conditions),
	  (u2:User)- [pr2:PREFER] -> (con2:Conditions)
WHERE u1.name = "user_name_1" AND
      u2.name = "user_name_2"
RETURN u1.name, u2.name, u1.surface, u2.surface, con1.desiredtemp,
       con2.desiredtemp, sqrt(sum((con1.desiredtemp - con2.desiredtemp)^2))
;

//Query 7
//More general, distance between a user and all others  based on 
//their preference on desired_temperature
MATCH (u1:User)- [pr1:PREFER] -> (con1:Conditions),
	  (u2:User)- [pr2:PREFER] -> (con2:Conditions)
WHERE u1.name = "user_name_1"
RETURN u1.name, u2.name, u1.surface, u2.surface, con1.desiredtemp,
       con2.desiredtemp, sqrt(sum((con1.desiredtemp - con2.desiredtemp)^2))
;

//Query 8
//More general, distance between a user and all others  based on 
//their preference on desired_temperature
MATCH (u1:User)- [pr1:PREFER] -> (con1:Conditions),
	  (u2:User)- [pr2:PREFER] -> (con2:Conditions)
WHERE u1.name = "user_name_1"
RETURN u1.name, u2.name, u1.surface, u2.surface, con1.desiredtemp, con2.desiredtemp, 
       sqrt((con1.desiredtemp - con2.desiredtemp)^2 + 
	   0.2*(toInteger(u1.surface) - toInteger(u2.surface))^2) AS Distance
ORDER BY Distance
;


//Query 9
//For the current moment find the 5  closest users and their current schedules 

MATCH (y:Year)-[:CONTAINS]->(m:Month)-[:CONTAINS]->(d:Day)-[:CONTAINS]->
      (h:Hour)
WHERE y.value = 2017 AND m.value = 3 AND d.value = 1 AND
      h.value = 12
WITH  h
MATCH (u1:User)- [pr1:PREFER] -> (con1:Conditions)
WHERE u1.name = "user_name_1"
MATCH (h)<-[:RATING_INSTANT]-(r:Rating)-[:FOR_SCHEDULE]->(s:Schedule),
      (u2:User)-[:GAVE]->(r),
	  (u2:User)- [pr2:PREFER] -> (con2:Conditions)
RETURN u1.name, u2.name, u1.surface, u2.surface, con1.desiredtemp, con2.desiredtemp, 
       sqrt((con1.desiredtemp - con2.desiredtemp)^2 + 
	   0.2*(toInteger(u1.surface) - toInteger(u2.surface))^2) AS Distance
ORDER BY Distance
;


//Query 10
//For the current moment find temperature and moments in the past with same temperature
MATCH (y:Year)-[:CONTAINS]->(m:Month)-[:CONTAINS]->(d:Day)-[:CONTAINS]->(h:Hour)
WHERE y.value = 2017 AND m.value = 3 AND d.value = 1 AND
      h.value = 12
MATCH (h)-[:TMP_READING]->(t:Temperature),
	  (y1:Year)-[:CONTAINS]->(m1:Month)-[:CONTAINS]->(d1:Day)-[:CONTAINS]->(h1:Hour)
MATCH (h1)-[:TMP_READING]->(t1:Temperature)
WHERE t.value = t1.value AND ((h.value-2)<=h1.value AND h1.value<=(h.value+2))
RETURN y1.value AS year, m1.value AS month ,d1.value AS day ,
       h1.value AS hour , t1.value AS temperature1
ORDER BY year DESC, month DESC, day DESC, hour DESC 
LIMIT 100
;

//---------------------------------------------------\\

//With preferences final
MATCH (y:Year)-[:CONTAINS]->(m:Month)-[:CONTAINS]->(d:Day)-[:CONTAINS]->
      (h:Hour)-[:CONDITIONS_INSTANT]-(hc1:HouseConditions)
      <-[:HAS_CONDITIONS]-(house:User {hid: "hid111"})-[:PREFER]->(c1:Conditions), 
     (house2:User)-[:PREFER]->(c2:Conditions) 
WHERE y.value = 2017 AND m.value = 3 AND d.value = 1 AND h.value = 20   
WITH house ,house2,y,m,d,h,hc1,c1,c2, split(house.orientation,'.') as or1, split(house2.orientation,'.') as or2 
WITH house ,house2,y,m,d,h,hc1,c1,c2,or1,or2, 
     sqrt((TOINTEGER(or1[1])-TOINTEGER(or2[1]))^2 
	      + TOINTEGER(or1[0])-TOINTEGER(or2[0]))^2 						
          +((TOINTEGER(house.surface)-TOINTEGER(house2.surface))/10)^2 
		  + (c1.desiredhumidity-c2.desiredhumidity)^2  
		  + (c1.desiredtemp-c2.desiredtemp)^2 
          + (c1.consumerprofile-c2.consumerprofile)^2) as distance  
WHERE house.borough=house2.borough AND house.hid<>house2.hid AND 
      c1.illness=c2.illness return house.hid, house2.hid, distance 
ORDER BY distance

 
//With house conditions final
MATCH (y:Year)-[:CONTAINS]->(m:Month)-[:CONTAINS]->(d:Day)-[:CONTAINS]->
      (h:Hour)-[:CONDITIONS_INSTANT]-(hc1:HouseConditions)
      <-[:HAS_CONDITIONS]-(house:User {hid: "hid111"}  ) -[:PREFER]->(c1:Conditions)
WHERE y.value = 2017 AND m.value = 3 AND d.value = 1 AND h.value = 20 
WITH house,y,m,d,h,hc1,c1
MATCH (y2:Year)-[:CONTAINS]->(m2:Month)-[:CONTAINS]->(d2:Day)-[:CONTAINS]->
      (h2:Hour)-[:CONDITIONS_INSTANT]-(hc2:HouseConditions)
       <-[:HAS_CONDITIONS]- (house2:User)-[:PREFER]->(c2:Conditions) 
WITH house ,house2,y,m,d,h,y2,m2,d2,h2,hc1,hc2,c1,c2, split(house.orientation,'.') as or1, split(house2.orientation,'.') as or2 
WITH house ,house2,y,m,d,h,y2,m2,d2,h2,hc1,c1,c2,or1,or2, 
     sqrt((TOINTEGER(or1[1])-TOINTEGER(or2[1]))^2 + (TOINTEGER(or1[0])-TOINTEGER(or2[0]))^2 
         +((TOINTEGER(house.surface)-TOINTEGER(house2.surface))/10)^2 
		 + (c1.desiredhumidity-c2.desiredhumidity)^2 
		 + (c1.desiredtemp-c2.desiredtemp)^2 
         + (c1.consumerprofile-c2.consumerprofile)^2  
         + (hc1.temperature-hc2.temperature)^2
         + (hc1.humidity-hc2.humidity)^2
     )as distance  
WHERE house.borough=house2.borough AND house.hid<>house2.hid  AND c1.illness=c2.illness 
RETURN house.hid, house2.hid,y2.value,m2.value,d2.value,h2.value, distance 
ORDER BY distance



//With weather conditions final 
MATCH (y:Year)-[:CONTAINS]->(m:Month)-[:CONTAINS]->(d:Day)-[:CONTAINS]->
      (h:Hour)-[:CONDITIONS_INSTANT]-(hc1:HouseConditions)
      <-[:HAS_CONDITIONS]-(house:User {hid: "hid111"}  ) -[:PREFER]->(c1:Conditions)
WHERE y.value = 2017 AND m.value = 3 AND d.value = 1 AND h.value = 20 
WITH house,y,m,d,h,hc1,c1
MATCH (h:Hour)-[:TMP_READING]->(t1:Temperature),(h:Hour)-[:HUM_READING]->(hum1:Humidity)
WITH house,y,m,d,h,hc1,c1,t1,hum1
MATCH (y2:Year)-[:CONTAINS]->(m2:Month)-[:CONTAINS]->(d2:Day)-[:CONTAINS]->
      (h2:Hour)-[:CONDITIONS_INSTANT]-(hc2:HouseConditions)
       <-[:HAS_CONDITIONS]- (house2:User)-[:PREFER]->(c2:Conditions) 
WITH house ,house2,y,m,d,h,y2,m2,d2,h2,hc1,hc2,c1,c2,t1,hum1,split(house.orientation,'.') as or1, split(house2.orientation,'.') as or2 
MATCH (h2:Hour)-[:TMP_READING]->(t2:Temperature),(h2:Hour)-[:HUM_READING]->(hum2:Humidity)
WITH house ,house2,y,m,d,h,y2,m2,d2,h2,hc1,c1,c2,or1,or2, t1,t2,hum1,hum2,
     sqrt((TOINTEGER(or1[1])-TOINTEGER(or2[1]))^2 + (TOINTEGER(or1[0])-TOINTEGER(or2[0]))^2 
         +((TOINTEGER(house.surface)-TOINTEGER(house2.surface))/10)^2 + (c1.desiredhumidity-c2.desiredhumidity)^2 + (c1.desiredtemp-c2.desiredtemp)^2 
         + (c1.consumerprofile-c2.consumerprofile)^2  
         + (hc1.temperature-hc2.temperature)^2
         + (hc1.humidity-hc2.humidity)^2
         + (t1.value-t2.value)^2
         + (hum1.value-hum2.value)^2
     )as distance  
WHERE house.borough=house2.borough AND house.hid<>house2.hid  AND c1.illness=c2.illness 
RETURN house.hid, house2.hid,y2.value,m2.value,d2.value,h2.value,distance 
ORDER BY distance




//With weather conditions final and returning schedule
MATCH (y:Year)-[:CONTAINS]->(m:Month)-[:CONTAINS]->(d:Day)-[:CONTAINS]->
      (h:Hour)-[:CONDITIONS_INSTANT]-(hc1:HouseConditions)
      <-[:HAS_CONDITIONS]-(house:User {hid: "hid222"}  ) -[:PREFER]->(c1:Conditions)
WHERE y.value = 2017 AND m.value = 3 AND d.value = 1 AND h.value = 12 
WITH house,y,m,d,h,hc1,c1
MATCH (h:Hour)-[:TMP_READING]->(t1:Temperature),(h:Hour)-[:HUM_READING]->(hum1:Humidity)
WITH house,y,m,d,h,hc1,c1,t1,hum1
MATCH (y2:Year)-[:CONTAINS]->(m2:Month)-[:CONTAINS]->(d2:Day)-[:CONTAINS]->
      (h2:Hour)-[:CONDITIONS_INSTANT]-(hc2:HouseConditions)
      <-[:HAS_CONDITIONS]- (house2:User)-[:PREFER]->(c2:Conditions) 
WITH house ,house2,y,m,d,h,y2,m2,d2,h2,hc1,hc2,c1,c2,t1,hum1,split(house.orientation,'.') as or1, split(house2.orientation,'.') as or2 
MATCH (h2:Hour)-[:TMP_READING]->(t2:Temperature),(h2:Hour)-[:HUM_READING]->(hum2:Humidity),(h2:Hour)<-[:RATING_INSTANT]-(rat2:Rating)<-[:GAVE]-(house2:User)
WITH house ,house2,y,m,d,h,y2,m2,d2,h2,hc1,hc2,c1,c2,or1,or2, t1,t2,hum1,hum2,rat2
MATCH (rat2:Rating)-[:FOR_SCHEDULE]->(sch2:Schedule)  
WITH house ,house2,y,m,d,h,y2,m2,d2,h2,hc1,hc2,c1,c2,or1,or2, t1,t2,hum1,hum2,rat2,sch2,
    sqrt((TOINTEGER(or1[1])-TOINTEGER(or2[1]))^2 + (TOINTEGER(or1[0])-TOINTEGER(or2[0]))^2 
          +((TOINTEGER(house.surface)-TOINTEGER(house2.surface))/10)^2 
          + (c1.desiredhumidity-c2.desiredhumidity)^2 + (c1.desiredtemp-c2.desiredtemp)^2 
          + (c1.consumerprofile-c2.consumerprofile)^2  
          + (hc1.temperature-hc2.temperature)^2 + (hc1.humidity-hc2.humidity)^2
          + (t1.value-t2.value)^2 + (hum1.value-hum2.value)^2
    )as distance  
WHERE house.borough=house2.borough AND house.hid<>house2.hid  AND c1.illness=c2.illness 
RETURN house.hid, house2.hid, y2.value AS Year, m2.value AS Month,  d2.value AS Day, h2.value AS Hour, rat2.value AS ratingUser2, sch2.value AS ScheduleUser2, distance 
ORDER BY distance  LIMIT 5

